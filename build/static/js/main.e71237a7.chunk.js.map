{"version":3,"sources":["UserInput/UserInput.js","UserOutput/UserOutput.js","inputType/inputType.js","Char/Char.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","className","for","onChange","nameclick","id","type","idclick","UserOUput","name","caption","InputType","changed","content","count","style","color","Char","stringList","App","state","users","age","currentUser","outputParagraph","pargraphCount","getIndex","event","userIndex","findIndex","u","target","value","setState","changeName","slice","inptTyping","input","length","remove_character","str","char_pos","substring","deleteChar","e","charIndex","i","parseInt","removed","this","split","map","c","cursor","onClick","user","string","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e71237a7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './UserInput.css';\n\nconst Input = props =>  {\n    return (\n      <div >\n        <div className=\"input-groub\">\n        <label for=\"user\">Enter new user name: </label> \n        <input onChange={props.nameclick} id=\"user\" type=\"text\" className=\"user-input\" />\n        </div>\n        <div className=\"input-groub\">\n        <label for=\"user-id\">Enter the id you want to change:</label>\n        <input onChange={props.idclick} id=\"user-id\" type=\"number\" className=\"id-input\" />\n        </div>\n        \n      </div>\n    );\n}\n\nexport default Input;\n","import React, { Component } from 'react';\nimport './UserOutput.css';\n\nconst UserOUput = props =>  {\n    return (\n      <div className=\"usercard\">\n        <p>User Name: {props.name}</p>\n        <p>User id: {props.id}</p>\n        <p>{props.caption}</p>\n      </div>\n    );\n}\n\nexport default UserOUput;\n","import React, { Component } from 'react';\nimport './inputType.css';\nimport \"../UserInput/UserInput.css\"\n\nconst InputType = props =>  {\n    return (\n      <div >\n          <div id=\"out-typing\" className=\"input-groub\">\n            <label for=\"type\">Type here ..</label>\n            <input id=\"input\" onChange={props.changed} type=\"text\" id=\"type\"></input>\n          </div>\n          <p>{props.content}({props.count})</p>\n          {\n            props.count > 15 ?\n            <p style={{color: \"green\"}}>too long text</p>\n            : <p style={{color: \"red\"}}>too short text</p>\n          }\n      </div>\n    );\n\n}\n\nexport default InputType;\n","import React, { Component, useState } from 'react';\nimport './Char.css';\n\n\nconst Char = props =>  {\n    return (\n      <div >\n        {props.stringList}\n      </div>\n    );\n\n}\n\nexport default Char;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Input from \"./UserInput/UserInput\";\nimport UserOUput from './UserOutput/UserOutput';\nimport InputType from \"./inputType/inputType\";\nimport Char from \"./Char/Char\"\n\nclass App extends Component {\n  state = {\n    users : [\n      {name: \"kareem\", age: \"22\", caption: \"i'm a web devoloper can i help you!\", id:\"1\"},\n      {name: \"khald\", age: \"34\", caption: \"i'm a doctor can i give you a medical consaltant\", id:\"2\"},\n      {name: \"mo sala\", age: \"34\", caption: \"i'm a soccer player. hello word\", id:\"3\"},\n        ],\n    currentUser: 1,\n    outputParagraph: null,\n    pargraphCount: null,\n    stringList: {} \n  }; \n\n  getIndex = event => {\n    // get the user index by id \n    const userIndex = this.state.users.findIndex(u => u.id === event.target.value);\n    // return the user index\n    this.setState({currentUser: userIndex})\n  } \n  \n  changeName = (event) => {\n    // get a copy of original users\n    const users = this.state.users.slice();\n    //get a targeted user by index\n    users[this.state.currentUser].name = event.target.value;\n    //update the state\n    this.setState({users: users})\n  }\n\n  inptTyping = (event) => {\n    const input = event.target.value;\n    this.setState({\n      outputParagraph: input,\n      pargraphCount: input.length,\n    });\n  }\n\n  remove_character = (str, char_pos) =>{\n     const part1 = str.substring(0, char_pos);\n     const part2 = str.substring(char_pos + 1, str.length);\n      return (part1 + part2);\n    }\n\n  deleteChar = (e) =>{\n    const charIndex = e.target.id;\n    const i = parseInt(charIndex, 10);\n    const outputParagraph = this.state.outputParagraph;\n    const removed = this.remove_character(outputParagraph, i)\n    this.setState({\n      outputParagraph: removed,\n      pargraphCount: removed.length\n    });\n\n  }\n\n  render(){\n    \n    let stringList;\n    if (this.state.outputParagraph){\n        stringList = (\n            <ol>\n                {\n                this.state.outputParagraph.split(\"\").map((c, i) => {\n                  return(<li id={i} style={{cursor: \"pointer\"}} onClick={this.deleteChar}>{c}</li>)\n          \n                })\n                }\n            </ol>\n        );\n    }  \n\n    return (\n      <div className=\"App\">\n        <div className=\"challenge\">\n          <h1>challenge one</h1>\n        <Input  idclick= {this.getIndex} nameclick={(event) => this.changeName(event)}/>\n        {\n          this.state.users.map((user) => {\n            return (\n              <UserOUput name={user.name} caption={user.caption} id={user.id}/>\n            )\n          })\n        }\n        </div>\n        <div className=\"challenge\">\n          <h1>challenge two</h1>\n          <InputType changed={this.inptTyping}  content={this.state.outputParagraph} count={this.state.pargraphCount}/>\n          <Char string={this.state.outputParagraph} deleteChar={this.deleteChar} stringList={stringList}/>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}